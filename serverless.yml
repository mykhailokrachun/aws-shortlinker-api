service: sls-test-task-api

custom:
  secrets: ${file(secrets.json)}
  scripts:
    hooks:
      'after:deploy:finalize': node --experimental-modules verifyEmail.mjs
  esbuild:
    bundle: true
    minify: false
    target: 'node18'
    platform: 'node'
    concurrency: 10
  autoswagger:
    host: 'localhost:3000/dev/'
    typefiles: ['./lib/api-types.d.ts']
    apiKeyHeaders: ['Authorization']
    excludeStages: ['production']

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  environment:
    JWT_SECRET: ${self:custom.secrets.JWT_SECRET}
    AWS_ID: ${self:custom.secrets.AWS_ID}
    EMAIL_FROM: ${self:custom.secrets.EMAIL_FROM}
    BASE_URL: !Sub 'https://${ApiGatewayRestApi}.execute-api.us-east-1.amazonaws.com/dev/'
    ACCOUNT_ID: ${self:custom.secrets.ACCOUNT_ID}

plugins:
  - serverless-iam-roles-per-function
  - serverless-auto-swagger
  - serverless-offline
  - serverless-esbuild

functions:
  verify-token:
    handler: functions/authorize.handler
  scheduled-deactivate-link:
    handler: functions/scheduledDeactivateLink.handler
    events:
      - eventBridge:
          eventBus: default
          pattern:
            source:
              - 'deactivator'
            detail-type:
              - 'scheduled-link-deactivator'
    iamRoleStatements:
      - Effect: Allow
        Action:
          - 'dynamodb:*'
          - 'sqs:*'
          - 'ses:*'
          - 'events:*'
          - 'scheduler:*'
        Resource: '*'
  queue-receiver:
    handler: functions/queueReceiver.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - ShortlinkerQueue
              - Arn
    iamRoleStatements:
      - Effect: Allow
        Action:
          - 'dynamodb:*'
          - 'sqs:*'
          - 'ses:*'
        Resource: '*'
  short-link:
    handler: functions/shortLink.handler
    events:
      - http:
          path: /{urlId}
          method: get
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - 'dynamodb:*'
          - 'sqs:*'
        Resource:
          - !GetAtt usersTable.Arn
          - !GetAtt linksTable.Arn
          - !GetAtt ShortlinkerQueue.Arn
  deactivate-link:
    handler: functions/deactivateLink.handler
    events:
      - http:
          path: deactivate/{urlId}
          method: delete
          cors: true
          responseData:
            200:
              bodyType: DeactivateLinkResponse
          authorizer:
            name: verify-token
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 3600
    iamRoleStatements:
      - Effect: Allow
        Action:
          - 'dynamodb:*'
          - 'sqs:*'
          - 'ses:*'
        Resource:
          - !GetAtt usersTable.Arn
          - !GetAtt linksTable.Arn
          - !GetAtt ShortlinkerQueue.Arn
  create-link:
    handler: functions/createLink.handler
    events:
      - http:
          path: create-link
          method: post
          cors: true
          request:
            schemas:
              application/json: ${file(lib/schemas/createLinkSchema.json)}
          bodyType: CreateLink
          responseData:
            201:
              bodyType: CreateLinkResponse
          authorizer:
            name: verify-token
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 3600
    iamRoleStatements:
      - Effect: Allow
        Action:
          - 'dynamodb:GetItem'
          - 'dynamodb:PutItem'
          - 'dynamodb:UpdateItem'
          - 'events:*'
          - 'scheduler:*'
          - 'sts:*'
          - 'iam:*'
          - 'lambda:*'
        Resource: '*'
  me:
    handler: functions/me.handler
    events:
      - http:
          path: me
          method: get
          cors: true
          responseData:
            200:
              bodyType: MeResponse
          authorizer:
            name: verify-token
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 3600
    iamRoleStatements:
      - Effect: Allow
        Action:
          - 'dynamodb:*'
        Resource:
          - !GetAtt usersTable.Arn
          - !GetAtt linksTable.Arn
  login:
    handler: functions/login.handler
    events:
      - http:
          path: login
          method: post
          cors: true
          request:
            schemas:
              application/json: ${file(lib/schemas/loginSchema.json)}
          bodyType: User
          responseData:
            200:
              bodyType: LoginResponse
    iamRoleStatements:
      - Effect: Allow
        Action:
          - 'dynamodb:PutItem'
          - 'dynamodb:GetItem'
        Resource:
          - !GetAtt usersTable.Arn
          - !GetAtt linksTable.Arn
  register:
    handler: functions/register.handler
    events:
      - http:
          path: register
          method: post
          cors: true
          request:
            schemas:
              application/json: ${file(lib/schemas/registerSchema.json)}
          bodyType: User
          responseData:
            200:
              bodyType: RegisterResponse
    iamRoleStatements:
      - Effect: Allow
        Action:
          - 'dynamodb:PutItem'
          - 'dynamodb:GetItem'
        Resource:
          - !GetAtt usersTable.Arn
          - !GetAtt linksTable.Arn
resources:
  Resources:
    EventBridgerRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: event-bridger-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - events.amazonaws.com
                  - scheduler.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: LambdaInvokeAccess
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - lambda:InvokeFunction
                  Resource: '*'
    ShortlinkerEvent:
      Type: AWS::Events::Rule
      Properties:
        EventPattern:
          source:
            - 'deactivator'
          detail-type:
            - 'scheduled-link-deactivator'
        Targets:
          - Arn: arn:aws:lambda:us-east-1:${self:provider.environment.ACCOUNT_ID}:function:scheduled-deactivate-link
            Id: 'DeactivateTarget'
    ShortlinkerQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: shortlinker-queue
    usersTable:
      Type: AWS::DynamoDB::GlobalTable
      Properties:
        TableName: users-table
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        Replicas:
          - Region: us-east-1
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
    linksTable:
      Type: AWS::DynamoDB::GlobalTable
      Properties:
        TableName: links-table
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        Replicas:
          - Region: us-east-1
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
